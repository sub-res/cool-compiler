// $Id: scanner.h 17 2007-08-19 18:51:39Z tb $

#ifndef Cool_SCANNER_H
#define Cool_SCANNER_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    Cool::Parser::token_type				\
    Cool::Scanner::lex(				\
	Cool::Parser::semantic_type* yylval,		\
	Cool::Parser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer CoolFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "Parser.h"
#include <map>
#include "Errors.h"

namespace Cool {

    /** Scanner is a derived class to add some extra function to the scanner
     * class. Flex itself creates a class named yyFlexLexer, which is renamed using
     * macros to CoolFlexLexer. However we change the context of the generated
     * yylex() function to be contained within the Scanner class. This is required
     * because the yylex() defined in CoolFlexLexer has no parameters. */

    class Scanner : public CoolFlexLexer {
    public:
        /** Create a new scanner object. The streams arg_yyin and arg_yyout default
         * to cin and cout, but that assignment is only made when initializing in
         * yylex(). */
        Scanner(Errors & errors, std::istream* arg_yyin = 0,
                std::ostream* arg_yyout = 0);

        /** Required for virtual functions */
        virtual ~Scanner();

        /** This is the main lexing function. It is generated by flex according to
         * the macro declaration YY_DECL above. The generated bison parser then
         * calls this virtual function to fetch new tokens. */
        virtual Parser::token_type lex(
                Parser::semantic_type* yylval,
                Parser::location_type* yylloc
                );

        /** Enable debug output (via arg_yyout) if compiled into the scanner. */
        void set_debug(bool b);
        static int strCtr;
    private:
        Errors * errors;
        void registerError(location *yylloc, std::string message);
    };


} // namespace Cool

#endif // Cool_SCANNER_H
