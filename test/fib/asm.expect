#generated assembly output:
	.data
	.align	2
	.globl	class_nameTab
	.globl	Main_protObj
	.globl	Int_protObj
	.globl	String_protObj
	.globl	Boolean_protObj
	.globl	boolean_lit0
	.globl	boolean_lit1
	.globl	Symbol_protObj
	.globl	heap_start
	.globl	_MemMgr_INITIALIZER
_MemMgr_INITIALIZER:
	.word	_GenGC_Init
	.globl	_MemMgr_COLLECTOR
_MemMgr_COLLECTOR:
	.word	_GenGC_Collect
	.globl	_MemMgr_TEST
_MemMgr_TEST:
	.word	0
	.word	-1
string_const0:
	.word	8
	.word	5
	.word	String_dispTab
	.word	int_const0
	.byte	0
	.align	2
	.word	-1
string_const1:
	.word	8
	.word	6
	.word	String_dispTab
	.word	int_const1
	.ascii	"Main"
	.byte	0
	.align	2
	.word	-1
string_const2:
	.word	8
	.word	7
	.word	String_dispTab
	.word	int_const2
	.ascii	"Fib.cool"
	.byte	0
	.align	2
	.word	-1
string_const3:
	.word	8
	.word	46
	.word	String_dispTab
	.word	int_const3
	.ascii	"What do you want to do?\n 0: Print first n Fibonacci numbers
 1: Print nth Fibonacci number (Recursive)
 2: Print nth Fibonacci number (Iterative)
 3: Exit program\n"
	.byte	0
	.align	2
	.word	-1
string_const4:
	.word	8
	.word	9
	.word	String_dispTab
	.word	int_const6
	.ascii	"Enter your choice: "
	.byte	0
	.align	2
	.word	-1
string_const5:
	.word	8
	.word	8
	.word	String_dispTab
	.word	int_const7
	.ascii	"Enter number: "
	.byte	0
	.align	2
	.word	-1
string_const6:
	.word	8
	.word	6
	.word	String_dispTab
	.word	int_const1
	.ascii	"\n\n"
	.byte	0
	.align	2
	.word	-1
string_const7:
	.word	8
	.word	5
	.word	String_dispTab
	.word	int_const4
	.ascii	" "
	.byte	0
	.align	2
	.word	-1
string_const8:
	.word	8
	.word	6
	.word	String_dispTab
	.word	int_const9
	.ascii	"Parser"
	.byte	0
	.align	2
	.word	-1
string_const9:
	.word	8
	.word	7
	.word	String_dispTab
	.word	int_const10
	.ascii	"Parser.cool"
	.byte	0
	.align	2
	.word	-1
string_const10:
	.word	8
	.word	15
	.word	String_dispTab
	.word	int_const11
	.ascii	"Format Exception: object is not an integer"
	.byte	0
	.align	2
	.word	-1
string_const11:
	.word	8
	.word	15
	.word	String_dispTab
	.word	int_const12
	.ascii	"Format Exception: object is not a boolean"
	.byte	0
	.align	2
	.word	-1
string_const12:
	.word	8
	.word	5
	.word	String_dispTab
	.word	int_const4
	.ascii	"0"
	.byte	0
	.align	2
	.word	-1
string_const13:
	.word	8
	.word	5
	.word	String_dispTab
	.word	int_const5
	.ascii	"Any"
	.byte	0
	.align	2
	.word	-1
string_const14:
	.word	8
	.word	9
	.word	String_dispTab
	.word	int_const16
	.ascii	"intern/basic.cool"
	.byte	0
	.align	2
	.word	-1
string_const15:
	.word	8
	.word	7
	.word	String_dispTab
	.word	int_const2
	.ascii	"ArrayAny"
	.byte	0
	.align	2
	.word	-1
string_const16:
	.word	8
	.word	6
	.word	String_dispTab
	.word	int_const17
	.ascii	"Boolean"
	.byte	0
	.align	2
	.word	-1
string_const17:
	.word	8
	.word	6
	.word	String_dispTab
	.word	int_const1
	.ascii	"true"
	.byte	0
	.align	2
	.word	-1
string_const18:
	.word	8
	.word	6
	.word	String_dispTab
	.word	int_const18
	.ascii	"false"
	.byte	0
	.align	2
	.word	-1
string_const19:
	.word	8
	.word	5
	.word	String_dispTab
	.word	int_const8
	.ascii	"IO"
	.byte	0
	.align	2
	.word	-1
string_const20:
	.word	8
	.word	6
	.word	String_dispTab
	.word	int_const1
	.ascii	"null"
	.byte	0
	.align	2
	.word	-1
string_const21:
	.word	8
	.word	5
	.word	String_dispTab
	.word	int_const5
	.ascii	"Int"
	.byte	0
	.align	2
	.word	-1
string_const22:
	.word	8
	.word	7
	.word	String_dispTab
	.word	int_const13
	.ascii	"Statistics"
	.byte	0
	.align	2
	.word	-1
string_const23:
	.word	8
	.word	6
	.word	String_dispTab
	.word	int_const9
	.ascii	"String"
	.byte	0
	.align	2
	.word	-1
string_const24:
	.word	8
	.word	6
	.word	String_dispTab
	.word	int_const9
	.ascii	"Symbol"
	.byte	0
	.align	2
	.word	-1
string_const25:
	.word	8
	.word	5
	.word	String_dispTab
	.word	int_const4
	.ascii	"'"
	.byte	0
	.align	2
	.word	-1
string_const26:
	.word	8
	.word	6
	.word	String_dispTab
	.word	int_const1
	.ascii	"Unit"
	.byte	0
	.align	2
	.word	-1
int_const0:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	0
	.word	-1
int_const1:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	4
	.word	-1
int_const2:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	8
	.word	-1
int_const3:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	165
	.word	-1
int_const4:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	1
	.word	-1
int_const5:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	3
	.word	-1
int_const6:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	19
	.word	-1
int_const7:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	14
	.word	-1
int_const8:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	2
	.word	-1
int_const9:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	6
	.word	-1
int_const10:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	11
	.word	-1
int_const11:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	42
	.word	-1
int_const12:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	41
	.word	-1
int_const13:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	10
	.word	-1
int_const14:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	48
	.word	-1
int_const15:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	58
	.word	-1
int_const16:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	17
	.word	-1
int_const17:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	7
	.word	-1
int_const18:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	5
	.word	-1
boolean_lit0:
	.word	4
	.word	4
	.word	Boolean_dispTab
	.word	0
	.word	-1
boolean_lit1:
	.word	4
	.word	4
	.word	Boolean_dispTab
	.word	1
class_nameTab:
	.word	string_const1	# 0 Main
	.word	string_const8	# 1 Parser
	.word	string_const13	# 2 Any
	.word	string_const15	# 3 ArrayAny
	.word	string_const16	# 4 Boolean
	.word	string_const19	# 5 IO
	.word	string_const21	# 6 Int
	.word	string_const22	# 7 Statistics
	.word	string_const23	# 8 String
	.word	string_const24	# 9 Symbol
	.word	string_const26	# 10 Unit

Any_dispTab:
	.word	Any.Any
	.word	Any.toString
	.word	Any.equals
ArrayAny_dispTab:
	.word	Any.Any
	.word	Any.toString
	.word	Any.equals
	.word	ArrayAny.ArrayAny
	.word	ArrayAny.length
	.word	ArrayAny.resize
	.word	ArrayAny.get
	.word	ArrayAny.set
Boolean_dispTab:
	.word	Any.Any
	.word	Boolean.toString
	.word	Boolean.equals
	.word	Boolean.Boolean
IO_dispTab:
	.word	Any.Any
	.word	Any.toString
	.word	Any.equals
	.word	IO.IO
	.word	IO.abort
	.word	IO.out
	.word	IO.is_null
	.word	IO.out_any
	.word	IO.in
	.word	IO.symbol
	.word	IO.symbol_name
Int_dispTab:
	.word	Any.Any
	.word	Int.toString
	.word	Int.equals
	.word	Int.Int
Main_dispTab:
	.word	Any.Any
	.word	Any.toString
	.word	Any.equals
	.word	IO.IO
	.word	IO.abort
	.word	IO.out
	.word	IO.is_null
	.word	IO.out_any
	.word	IO.in
	.word	IO.symbol
	.word	IO.symbol_name
	.word	Main.Main
	.word	Main.fibRec
	.word	Main.fib
	.word	Main.printFibs
	.word	Main.fibList
Parser_dispTab:
	.word	Any.Any
	.word	Any.toString
	.word	Any.equals
	.word	IO.IO
	.word	IO.abort
	.word	IO.out
	.word	IO.is_null
	.word	IO.out_any
	.word	IO.in
	.word	IO.symbol
	.word	IO.symbol_name
	.word	Parser.Parser
	.word	Parser.anyToInt
	.word	Parser.anyToStr
	.word	Parser.anyToBool
	.word	Parser.boolToStr
	.word	Parser.boolToInt
	.word	Parser.intToString
	.word	Parser.intToBool
	.word	Parser.charToBool
	.word	Parser.strToBool
	.word	Parser.strToInt
	.word	Parser.charToInt
Statistics_dispTab:
	.word	Any.Any
	.word	Any.toString
	.word	Any.equals
	.word	IO.IO
	.word	IO.abort
	.word	IO.out
	.word	IO.is_null
	.word	IO.out_any
	.word	IO.in
	.word	IO.symbol
	.word	IO.symbol_name
	.word	Statistics.Statistics
	.word	Statistics.clear
	.word	Statistics.get
	.word	Statistics.print
String_dispTab:
	.word	Any.Any
	.word	String.toString
	.word	String.equals
	.word	String.String
	.word	String.length
	.word	String.concat
	.word	String.substring
	.word	String.charAt
	.word	String.indexOf
Symbol_dispTab:
	.word	Any.Any
	.word	Symbol.toString
	.word	Any.equals
	.word	Symbol.Symbol
	.word	Symbol.hashCode
Unit_dispTab:
	.word	Any.Any
	.word	Any.toString
	.word	Any.equals
	.word	Unit.Unit
	.word	-1

Any_protObj:
	.word	2
	.word	3
	.word	Any_dispTab
	.word	-1

ArrayAny_protObj:
	.word	3
	.word	5
	.word	ArrayAny_dispTab
	.word	int_const0	#length
	.word	0		#array_field
	.word	-1

Boolean_protObj:
	.word	4
	.word	4
	.word	Boolean_dispTab
	.word	0		#value
	.word	-1

IO_protObj:
	.word	5
	.word	3
	.word	IO_dispTab
	.word	-1

Int_protObj:
	.word	6
	.word	4
	.word	Int_dispTab
	.word	0		#value
	.word	-1

Statistics_protObj:
	.word	7
	.word	3
	.word	Statistics_dispTab
	.word	-1

String_protObj:
	.word	8
	.word	5
	.word	String_dispTab
	.word	int_const0	#length
	.word	0		#str_field
	.word	-1

Symbol_protObj:
	.word	9
	.word	6
	.word	Symbol_dispTab
	.word	0		#next
	.word	string_const0	#name
	.word	int_const0	#hash
	.word	-1

Unit_protObj:
	.word	10
	.word	3
	.word	Unit_dispTab
	.word	-1

Main_protObj:
	.word	0
	.word	3
	.word	Main_dispTab
	.word	-1

Parser_protObj:
	.word	1
	.word	3
	.word	Parser_dispTab
heap_start:
	.word	0
	.text
	.globl	Main.Main
create_int:
	addiu	$sp	$sp	-4
	sw	$ra	4($sp)
	la	$t0	Int_protObj
	sw	$a0	12($t0)
	move	$a0	$t0
	jal	Any.clone
	lw	$ra	4($sp)
	addiu	$sp	$sp	4
	jr	$ra
lteq_helper:
	addiu	$sp	$sp	-4
	sw	$ra	4($sp)
	lw	$a0	12($a0)
	lw	$a1	12($a1)
	sub	$a1	$a1	$a0
	blez	$a1		create_bool1
	j	create_bool0
lt_helper:
	addiu	$sp	$sp	-4
	sw	$ra	4($sp)
	lw	$a0	12($a0)
	lw	$a1	12($a1)
	sub	$a1	$a1	$a0
	bltz	$a1		create_bool1
	j	create_bool0
create_bool0:
	la	$a0	boolean_lit0
	jal	Any.clone
	j	bool_helper_end
create_bool1:
	la	$a0	boolean_lit1
	jal	Any.clone
	j	bool_helper_end
bool_helper_end:
	lw	$ra	4($sp)
	addiu	$sp	$sp	4
	jr	$ra
negate:
	lw	$a0	12($a0)
	beq	$a0	$zero	negTrue
	la	$a0	boolean_lit0
	jr	$ra
negTrue:
	la	$a0	boolean_lit1
	jr	$ra
Main.Main:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	move	$a0	$s0

	li	$t1	6
	la	$a1	string_const2
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	12($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	sw	$s0	4($sp)		
	la	$a0	Parser_protObj
	jal	Any.clone
	move	$s0	$a0
	lw	$t1	8($s0)
	lw	$t1	44($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	move	$s4	$a0
	la	$a0	boolean_lit1
	jal	Any.clone
	move	$s3	$a0
_while0:
	move	$a0	$s3
	lw	$a0	12($a0)
	beq	$a0	$zero	_endwhile0
	addiu	$sp	$sp	-4	
	la	$a0	string_const3
	jal	Any.clone
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	20($t1)
	jalr	$t1
	la	$a0	int_const4
	jal	Any.clone
	lw	$t0	12($a0)
	sub	$t0	$zero	$t0
	sw	$t0	12($a0)
	move	$s2	$a0
_while1:
	move	$a0	$s2
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const0
	jal	Any.clone
	lw	$a1	4($sp)		
	sw	$ra	4($sp)		
	jal	lt_helper
	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_else0
	la	$a0	boolean_lit1
	jal	Any.clone
	j	_endif0
_else0:
	la	$a0	int_const5
	jal	Any.clone
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	move	$a0	$s2
	lw	$a1	4($sp)		
	sw	$ra	4($sp)		
	jal	lt_helper
	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
_endif0:
	lw	$a0	12($a0)
	beq	$a0	$zero	_endwhile1
	addiu	$sp	$sp	-4	
	la	$a0	string_const4
	jal	Any.clone
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	20($t1)
	jalr	$t1
	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	move	$a0	$s4
	addiu	$sp	$sp	-8	
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	32($t1)
	jalr	$t1
	sw	$a0	8($sp)
	lw	$a0	4($sp)		
	addiu	$sp	$sp	4

	li	$t1	24
	la	$a1	string_const2
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	84($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4

	move	$s2	$a0
	move	$a0	$zero
	j	_while1

_endwhile1:
	move	$a0	$zero
	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	move	$a0	$s2
	addiu	$sp	$sp	-8	
	sw	$a0	4($sp)
	la	$a0	int_const5
	jal	Any.clone
	sw	$a0	8($sp)
	lw	$a0	4($sp)		
	addiu	$sp	$sp	4

	li	$t1	27
	la	$a1	string_const2
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	8($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_else1
	la	$a0	boolean_lit0
	jal	Any.clone

	move	$s3	$a0
	move	$a0	$zero
	j	_endif1
_else1:
	la	$a0	int_const4
	jal	Any.clone
	lw	$t0	12($a0)
	sub	$t0	$zero	$t0
	sw	$t0	12($a0)
	move	$s1	$a0
_while2:
	move	$a0	$s1
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const0
	jal	Any.clone
	lw	$a1	4($sp)		
	sw	$ra	4($sp)		
	jal	lt_helper
	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_endwhile2
	addiu	$sp	$sp	-4	
	la	$a0	string_const5
	jal	Any.clone
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	20($t1)
	jalr	$t1
	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	move	$a0	$s4
	addiu	$sp	$sp	-8	
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	32($t1)
	jalr	$t1
	sw	$a0	8($sp)
	lw	$a0	4($sp)		
	addiu	$sp	$sp	4

	li	$t1	33
	la	$a1	string_const2
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	84($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4

	move	$s1	$a0
	move	$a0	$zero
	j	_while2

_endwhile2:
	move	$a0	$zero
	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	move	$a0	$s2
	addiu	$sp	$sp	-8	
	sw	$a0	4($sp)
	la	$a0	int_const0
	jal	Any.clone
	sw	$a0	8($sp)
	lw	$a0	4($sp)		
	addiu	$sp	$sp	4

	li	$t1	37
	la	$a1	string_const2
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	8($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_else2
	addiu	$sp	$sp	-4	
	move	$a0	$s1
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	56($t1)
	jalr	$t1
	j	_endif2
_else2:
	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	move	$a0	$s2
	addiu	$sp	$sp	-8	
	sw	$a0	4($sp)
	la	$a0	int_const4
	jal	Any.clone
	sw	$a0	8($sp)
	lw	$a0	4($sp)		
	addiu	$sp	$sp	4

	li	$t1	37
	la	$a1	string_const2
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	8($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_else3
	addiu	$sp	$sp	-8
	move	$a0	$s1
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	48($t1)
	jalr	$t1
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	28($t1)
	jalr	$t1
	j	_endif3
_else3:
	addiu	$sp	$sp	-8
	move	$a0	$s1
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	52($t1)
	jalr	$t1
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	28($t1)
	jalr	$t1
_endif3:
_endif2:
	addiu	$sp	$sp	-4	
	la	$a0	string_const6
	jal	Any.clone
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	20($t1)
	jalr	$t1
_endif1:
	j	_while0

_endwhile0:
	move	$a0	$zero
	move	$a0	$s0

	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	jr	$ra
Main.fibRec:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	lw	$a0	8($sp)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const8
	jal	Any.clone
	lw	$a1	4($sp)		
	sw	$ra	4($sp)		
	jal	lt_helper
	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_else4
	lw	$a0	8($sp)
	j	_endif4
_else4:
	addiu	$sp	$sp	-4	
	lw	$a0	12($sp)
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const4
	jal	Any.clone
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	sub	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	48($t1)
	jalr	$t1
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	addiu	$sp	$sp	-4	
	lw	$a0	16($sp)
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const8
	jal	Any.clone
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	sub	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	48($t1)
	jalr	$t1
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	add	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone
_endif4:

	lw	$ra	4($sp)		
	addiu	$sp	$sp	8
	jr	$ra
Main.fib:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	addiu	$sp	$sp	-8	
	lw	$a0	16($sp)
	sw	$a0	8($sp)
	la	$a0	boolean_lit0
	jal	Any.clone
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	60($t1)
	jalr	$t1

	lw	$ra	4($sp)		
	addiu	$sp	$sp	8
	jr	$ra
Main.printFibs:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	addiu	$sp	$sp	-8	
	lw	$a0	16($sp)
	sw	$a0	8($sp)
	la	$a0	boolean_lit1
	jal	Any.clone
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	60($t1)
	jalr	$t1

	lw	$ra	4($sp)		
	addiu	$sp	$sp	8
	jr	$ra
Main.fibList:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	la	$a0	int_const0
	jal	Any.clone
	move	$t6	$a0
	la	$a0	int_const4
	jal	Any.clone
	move	$t5	$a0
	la	$a0	int_const0
	jal	Any.clone
	move	$s6	$a0
	la	$a0	int_const4
	jal	Any.clone
	move	$s5	$a0
_while3:
	move	$a0	$s5
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	lw	$a0	16($sp)
	lw	$a1	4($sp)		
	sw	$ra	4($sp)		
	jal	lteq_helper
	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_endwhile3
	lw	$a0	8($sp)
	lw	$a0	12($a0)
	beq	$a0	$zero	_else5
	addiu	$sp	$sp	-4	
	move	$a0	$s6
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	28($t1)
	jalr	$t1
	addiu	$sp	$sp	-4	
	la	$a0	string_const7
	jal	Any.clone
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	20($t1)
	jalr	$t1
	j	_endif5
_else5:
_endif5:
	move	$a0	$t6
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	move	$a0	$t5
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	add	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone

	move	$s6	$a0
	move	$a0	$zero
	move	$a0	$t5

	move	$t6	$a0
	move	$a0	$zero
	move	$a0	$s6

	move	$t5	$a0
	move	$a0	$zero
	move	$a0	$s5
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const4
	jal	Any.clone
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	add	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone

	move	$s5	$a0
	move	$a0	$zero
	j	_while3

_endwhile3:
	move	$a0	$zero
	move	$a0	$t6

	lw	$ra	4($sp)		
	addiu	$sp	$sp	12
	jr	$ra
Parser.Parser:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	move	$a0	$s0

	li	$t1	5
	la	$a1	string_const9
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	12($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	move	$a0	$s0

	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	jr	$ra
Parser.strToInt:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	la	$a0	int_const0
	jal	Any.clone
	move	$t5	$a0
	la	$a0	int_const0
	jal	Any.clone
	move	$s6	$a0
_while4:
	move	$a0	$s6
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const0
	jal	Any.clone
	lw	$a1	4($sp)		
	sw	$ra	4($sp)		
	jal	lt_helper
	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_else6
	la	$a0	boolean_lit0
	jal	Any.clone
	j	_endif6
_else6:
	move	$a0	$t5
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	lw	$a0	16($sp)

	li	$t1	44
	la	$a1	string_const9
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	16($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	lw	$a1	4($sp)		
	sw	$ra	4($sp)		
	jal	lt_helper
	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
_endif6:
	lw	$a0	12($a0)
	beq	$a0	$zero	_endwhile4
	addiu	$sp	$sp	-8
	sw	$s0	4($sp)		
	lw	$a0	16($sp)
	addiu	$sp	$sp	-12	
	sw	$a0	4($sp)
	move	$a0	$t5
	sw	$a0	12($sp)
	move	$a0	$t5
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const4
	jal	Any.clone
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	add	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone
	sw	$a0	8($sp)
	lw	$a0	4($sp)		
	addiu	$sp	$sp	4

	li	$t1	45
	la	$a1	string_const9
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	24($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	88($t1)
	jalr	$t1
	move	$s5	$a0
	move	$a0	$s5
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const0
	jal	Any.clone
	lw	$a1	4($sp)		
	sw	$ra	4($sp)		
	jal	lt_helper
	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_else7
	move	$a0	$s5

	move	$s6	$a0
	move	$a0	$zero
	j	_endif7
_else7:
	move	$a0	$s6
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const13
	jal	Any.clone
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	mul	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	move	$a0	$s5
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	add	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone

	move	$s6	$a0
	move	$a0	$zero
_endif7:
	move	$a0	$t5
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const4
	jal	Any.clone
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	add	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone

	move	$t5	$a0
	move	$a0	$zero
	j	_while4

_endwhile4:
	move	$a0	$zero
	move	$a0	$s6

	lw	$ra	4($sp)		
	addiu	$sp	$sp	8
	jr	$ra
Parser.charToInt:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	lw	$a0	12($sp)
	addiu	$sp	$sp	-8	
	sw	$a0	4($sp)
	la	$a0	int_const0
	jal	Any.clone
	sw	$a0	8($sp)
	lw	$a0	4($sp)		
	addiu	$sp	$sp	4

	li	$t1	56
	la	$a1	string_const9
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	28($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	move	$t6	$a0
	move	$a0	$t6
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const14
	jal	Any.clone
	lw	$a1	4($sp)		
	sw	$ra	4($sp)		
	jal	lt_helper
	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_else8
	la	$a0	int_const4
	jal	Any.clone
	lw	$t0	12($a0)
	sub	$t0	$zero	$t0
	sw	$t0	12($a0)
	j	_endif8
_else8:
	la	$a0	int_const15
	jal	Any.clone
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	move	$a0	$t6
	lw	$a1	4($sp)		
	sw	$ra	4($sp)		
	jal	lteq_helper
	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_else9
	la	$a0	int_const4
	jal	Any.clone
	lw	$t0	12($a0)
	sub	$t0	$zero	$t0
	sw	$t0	12($a0)
	j	_endif9
_else9:
	move	$a0	$t6
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const14
	jal	Any.clone
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	sub	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone
_endif9:
_endif8:

	lw	$ra	4($sp)		
	addiu	$sp	$sp	8
	jr	$ra
ArrayAny.length:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	lw	$a0	12($s0)

	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	jr	$ra
Boolean.toString:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	move	$a0	$s0
	lw	$a0	12($a0)
	beq	$a0	$zero	_else10
	la	$a0	string_const17
	jal	Any.clone
	j	_endif10
_else10:
	la	$a0	string_const18
	jal	Any.clone
_endif10:

	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	jr	$ra
IO.IO:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	move	$a0	$s0

	li	$t1	11
	la	$a1	string_const14
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	0($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	move	$a0	$s0

	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	jr	$ra
IO.is_null:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

_match0:
	lw	$a0	8($sp)
	beq	$a0	$zero	_match0_caseNull
	addiu	$sp	$sp	-4
	sw	$a0	4($sp)
	lw	$t0	0($a0)
	j	_match0_caseAny
_match0_abort:
	li	$t1	20
	la	$a1	string_const14
	j	_case_abort
_match0_caseNull:
	la	$a0	boolean_lit1
	jal	Any.clone
	j	_endmatchnull0
_match0_caseAny:
	la	$a0	boolean_lit0
	jal	Any.clone
	j	_endmatch0
_endmatch0:
	addiu	$sp	$sp	4
_endmatchnull0:

	lw	$ra	4($sp)		
	addiu	$sp	$sp	8
	jr	$ra
IO.out_any:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	addiu	$sp	$sp	-8
	lw	$a0	16($sp)
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	24($t1)
	jalr	$t1
	lw	$a0	12($a0)
	beq	$a0	$zero	_else11
	la	$a0	string_const20
	jal	Any.clone
	j	_endif11
_else11:
	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	lw	$a0	16($sp)

	li	$t1	28
	la	$a1	string_const14
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	4($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
_endif11:
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	20($t1)
	jalr	$t1

	lw	$ra	4($sp)		
	addiu	$sp	$sp	8
	jr	$ra
Statistics.Statistics:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	move	$a0	$s0

	li	$t1	183
	la	$a1	string_const14
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	12($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	move	$a0	$s0

	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	jr	$ra
String.toString:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	move	$a0	$s0

	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	jr	$ra
String.length:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	lw	$a0	12($s0)

	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	jr	$ra
String.indexOf:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	lw	$a0	12($sp)

	li	$t1	113
	la	$a1	string_const14
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	16($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	move	$s4	$a0
	lw	$a0	12($s0)
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	move	$a0	$s4
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	sub	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone
	move	$s3	$a0
	la	$a0	int_const0
	jal	Any.clone
	move	$s2	$a0
	la	$a0	int_const4
	jal	Any.clone
	lw	$t0	12($a0)
	sub	$t0	$zero	$t0
	sw	$t0	12($a0)
	move	$s1	$a0
_while5:
	move	$a0	$s2
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	move	$a0	$s3
	lw	$a1	4($sp)		
	sw	$ra	4($sp)		
	jal	lteq_helper
	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_endwhile5
	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	addiu	$sp	$sp	-8	
	move	$a0	$s2
	sw	$a0	8($sp)
	move	$a0	$s2
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	move	$a0	$s4
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	add	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone
	sw	$a0	4($sp)
	move	$a0	$s0
	lw	$t1	8($s0)
	lw	$t1	24($t1)
	jalr	$t1
	addiu	$sp	$sp	-8	
	sw	$a0	4($sp)
	lw	$a0	20($sp)
	sw	$a0	8($sp)
	lw	$a0	4($sp)		
	addiu	$sp	$sp	4

	li	$t1	118
	la	$a1	string_const14
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	8($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	lw	$a0	12($a0)
	beq	$a0	$zero	_else12
	move	$a0	$s2

	move	$s1	$a0
	move	$a0	$zero
	move	$a0	$s3
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const4
	jal	Any.clone
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	add	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone

	move	$s2	$a0
	move	$a0	$zero
	j	_endif12
_else12:
	move	$a0	$s2
	lw	$a0	12($a0)
	addiu	$sp	$sp	-4	
	sw	$a0	4($sp)		
	la	$a0	int_const4
	jal	Any.clone
	lw	$a0	12($a0)
	lw	$t0	4($sp)		
	addiu	$sp	$sp	4
	add	$t0	$t0	$a0

	la	$a0	Int_protObj
	sw	$t0	12($a0)
	jal	Any.clone

	move	$s2	$a0
	move	$a0	$zero
_endif12:
	j	_while5

_endwhile5:
	move	$a0	$zero
	move	$a0	$s1

	lw	$ra	4($sp)		
	addiu	$sp	$sp	8
	jr	$ra
Symbol.toString:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	la	$a0	string_const25
	jal	Any.clone
	addiu	$sp	$sp	-8	
	sw	$a0	4($sp)
	lw	$a0	16($s0)
	sw	$a0	8($sp)
	lw	$a0	4($sp)		
	addiu	$sp	$sp	4

	li	$t1	143
	la	$a1	string_const14
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	20($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4

	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	jr	$ra
Symbol.hashCode:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	lw	$a0	20($s0)

	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	jr	$ra
Unit.Unit:
	addiu	$sp	$sp	-4	
	sw	$ra	4($sp)		

	addiu	$sp	$sp	-4	
	sw	$s0	4($sp)		
	move	$a0	$s0

	li	$t1	44
	la	$a1	string_const14
	beq	$a0	$zero	_dispatch_abort
	move	$s0	$a0
	lw	$t1	8($a0)
	lw	$t1	0($t1)
	jalr	$t1
	lw	$s0	4($sp)		
	addiu	$sp	$sp	4
	move	$a0	$s0

	lw	$ra	4($sp)		
	addiu	$sp	$sp	4
	jr	$ra
